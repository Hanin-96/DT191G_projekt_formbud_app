@page "/product/{id:int}"
@using FormBudApp.Models;
@inject HttpClient Http
@inject NavigationManager NavManager
@implements IDisposable


<PageTitle>Product</PageTitle>


<div class="product-container">
    <div class="product-wrap">

        @if (CurrentProduct != null)
        {
            <div>
                <h1>@CurrentProduct.ProductName</h1>
                <div>
                    <p>@CurrentProduct.Description</p>
                    <p><span>Skick: </span>@CurrentProduct.Condition</p>
                    <p><span>Värde: </span>@CurrentProduct.Worth</p>
                </div>
            </div>
            <div>
                <img style="width: 300px; height: auto;" src="http://localhost:5021/images/@CurrentProduct.ImageName" alt="produktbild" class="product-img" />
            </div>
        }
    </div>
    <div class="form-bid-wrap">

        @if (BidList != null)
        {
            <div>
                <div class="table-wrap">

                    <table class="table table-bid">
                        <thead>
                            <tr class="form-title">
                                <th>@TimeDeadlineString</th>
                                <th>Budgivning</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var bid in BidList)
                            {
                                <tr>
                                    <td>Budgivare @bid.BuyerId</td>
                                    <td>@bid.Price</td>
                                </tr>
                            }
                        </tbody>

                        <tfoot>
                            <tr>
                                @if (LatestBid != null)
                                {
                                    if (LatestBid.Price >= CurrentProduct?.MinPrice)
                                    {
                                        <td class="acceptedBid">
                                            Senaste bud just nu: @LatestBid.Price
                                        </td>
                                    }
                                    else if (LatestBid.Price < CurrentProduct?.MinPrice)
                                    {
                                        <td class="lowBid">
                                            Senaste bud just nu: @LatestBid.Price
                                        </td>
                                    }
                                }
                                else
                                {
                                    <td>
                                        Inga bud just nu
                                    </td>
                                }

                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        }
        else
        {
            <div>
                <div class="table-wrap">

                    <table class="table table-bid">
                        <thead>
                            <tr class="form-title">
                                <th>@TimeDeadlineString</th>
                                <th>Budgivning</th>
                            </tr>
                        </thead>

                        <tbody>
                        </tbody>

                        <tfoot>
                            <tr>
                                <td>
                                    Inga bud just nu
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        }
        @if (TimeIsUp == false)
        {
            <EditForm Model=@BidRequest OnSubmit=@FormSubmitted class="bid-form-container">
                <h2 class="form-title">Lägg till nytt bud</h2>
                <div class="bid-form">
                    <div>
                        <label>Namn:</label>
                        <InputText @bind-Value=BidRequest.BuyerName class="form-control" id="BuyerName" />
                    </div>

                    <div>
                        <label>E-post:</label>
                        <input type="email" @bind-value=BidRequest.BuyerEmail class="form-control" id="BuyerEmail" />
                    </div>

                    <div>
                        <label>Telefon:</label>
                        <input type="tel" @bind-value=BidRequest.BuyerPhone class="form-control" id="BuyerPhone" />
                    </div>

                    <div>
                        <label>Bud:</label>
                        <InputNumber @bind-Value=BidRequest.Price class="form-control" id="Price" />
                    </div>
                </div>

                <input type="submit" class="btn-submit" value="Lägg bud" />
            </EditForm>

        }

    </div>
</div>

@code {
    //Produkts id som hämtas från url
    [Parameter]
    public int Id { get; set; }

    //Variabel för senaste/högsta bud
    public Bid? LatestBid { get; set; }

    //Variabel för när tiden är ute
    public bool TimeIsUp { get; set; } = false;

    //Variabel som visar tid som är kvar på budgivning
    public TimeSpan TimeDeadline { get; set; }
    public string? TimeDeadlineString { get; set; }
    private Timer? DeadlineTimer;

    //Img
    public string? FileName { get; set; }



    //Modell för formulär som skickas in
    private BidRequest BidRequest = new BidRequest();
    //En lista på en produkts bud
    private Bid[]? BidList;

    //Sidans produkt
    private Product? CurrentProduct;

    //Onload funktion som körs vid laddning
    protected override void OnInitialized()
    {
        //Sätter bidRequest produktId till Id som hämtas i url
        BidRequest.ProductId = Id;

    }

    //Vid asykront laddning ska en lista av bids och produkten hämtas med GET anrop
    protected override async Task OnInitializedAsync()
    {
        BidList = await Http.GetFromJsonAsync<Bid[]>("http://localhost:5021/api/bid/" + Id);

        if (BidList?.Length > 0)
        {
            //Returnera högsta bud
            LatestBid = BidList?.OrderByDescending(b => b.Price).ToList()[0];
        }

        //Hämtar all info om specifik produkt
        CurrentProduct = await Http.GetFromJsonAsync<Product>("http://localhost:5021/api/products/" + Id);
        SetDeadlineTime();

    }

    //Sätta tiden för deadline
    private void SetDeadlineTime()
    {
        if (CurrentProduct == null)
        {
            return;
        }
        //Tid som är kvar
        TimeDeadline = CurrentProduct.TimeLeft - DateTime.Now;
        if (TimeDeadline.Days > 1)
        {
            TimeDeadlineString = TimeDeadline.ToString("%d") + " dagar kvar";
        }
        else if (TimeDeadline.Seconds < 0)
        {
            DeadlineHit();

        }
        else
        {
            TimeDeadlineString = TimeDeadline.ToString(@"hh\:mm\:ss");
            //Uppdaterar tiden varje sekund med timer
            DeadlineTimer = new Timer(updateTime, null, 0, 1000);
        }
    }

    private void DeadlineHit()
    {
        TimeDeadlineString = "Tiden är ute";
        TimeIsUp = true;

    }

    private void updateTime(object? state)
    {
        if (CurrentProduct == null)
        {
            return;
        }
        TimeDeadline = CurrentProduct.TimeLeft - DateTime.Now;

        if (TimeDeadline.Seconds < 0)
        {
            RefreshPage();

        }
        else
        {
            TimeDeadlineString = TimeDeadline.ToString(@"hh\:mm\:ss");
            InvokeAsync(StateHasChanged);
        }

    }

    //Frigöra resurser när timer inte behövs längre, bättre prestanda
    public void Dispose()
    {
        DeadlineTimer?.Dispose();
    }

    //Skickar formuläret via POST anrop till API:et
    private async Task FormSubmitted(EditContext editContext)
    {
        //Validerar om formuläret är korrekt
        bool formIsValid = editContext.Validate();

        //om valideringen är korrekt
        if (formIsValid)
        {
            //lägger ett bud
            var response = await Http.PostAsJsonAsync("http://localhost:5021/api/bid", BidRequest);
            if (response.StatusCode == System.Net.HttpStatusCode.Created)
            {
                RefreshPage();
            }
        }
    }

    private void RefreshPage()
    {
        //Laddar om sidan om budet gick att skicka in
        NavManager.NavigateTo(NavManager.Uri, true);

    }



}
